var events = {};
var grid = [];
var Parent = React.createClass({
   getInitialState: function() {
      // Build cell array
      var cells = [];
      for (var y = 0; y < 30; y++) {
         for (var x = 0; x < 30; x++) {
            cells.push(<Cell id={y + "-" + x} cells={cells} />);
         }
      }
      return {
         cells: cells
      };

   },

   onClear: function() {
      $(events).trigger("clear");
   },
   onPrint: function () {
      grid = [];
      $(events).trigger("print");
   },
   console: function () {
      console.log(JSON.stringify(grid))
   },
   render: function() {
      return (
      <div>
          <div className="box">
          {this.state.cells}
          </div>
          <div className="footer">
          <button onClick={this.onClear}>Clear</button>
          <button onClick={this.onPrint}>Set Grid</button>
          <button onClick={this.console}>Console</button>
          </div>
      </div>
      );
   }
});

var Cell = React.createClass({
   getInitialState: function() {
      return {
         alive: Math.random() < 0.7 ? false : true,
         nextState: false
      }
   },
   componentDidMount: function() {
      this.props.cells[this.props.id] = this; // place cell as object in global array 
      $(events).on("clear", this.clear);
      $(events).on("print", this.print);
   },
   onClick: function(e) {
      this.setState({
         alive: !this.state.alive
      });
   },
   clear: function() {
      this.setState({
         alive: false
      });
   },
   print: function() {
      if (this.state.alive == true) {
         let position = this.props.id.split("-")
         grid.push({x:position[1],y:position[0]})
      }
   },
   render: function() {
      return (
         <div id={this.props.id} onClick={this.onClick} className={this.state.alive?"alive":"dead"}></div>
      );
   }
});

ReactDOM.render(<Parent />, document.getElementById('app'));